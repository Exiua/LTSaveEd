@using LTSaveEd.Models
@using LTSaveEd.Models.CharacterData.BodyData.AssData
@using LTSaveEd.Models.XmlData

@*Future Idea: Use inheritance to avoid duplicating ValueDisplayPairSelect code*@

<MudSelect T="ValueDisplayPair<string>" @bind-Value="@CurrentValue" Label="@Label" AnchorOrigin="Origin.BottomCenter">
    @foreach (var value in Values)
    {
        <MudSelectItem Value="@value"/>
    }
</MudSelect>

@code {
    private ValueDisplayPair<string> _currentValue = null!;
    
    /// <summary>
    ///     The values to display in the select.
    /// </summary>
    [Parameter] public required IEnumerable<ValueDisplayPair<string>> Values { get; set; }
    
    /// <summary>
    ///    The label to display for this component.
    /// </summary>
    [Parameter] public required string Label { get; set; }
    
    /// <summary>
    ///    The attribute to bind to.
    /// </summary>
    [Parameter] public required XmlAttribute<string> Attribute { get; set; }
    
    /// <summary>
    ///   The leg component of the character being edited.
    /// </summary>
    [Parameter] public required Leg Leg { get; set; }
    
    /// <summary>
    ///  The type of leg component being edited.
    /// </summary>
    [Parameter] public LegComponentType LegComponentType { get; set; }
    
    protected ValueDisplayPair<string> CurrentValue
    {
        get => _currentValue;
        set
        {
            _currentValue = value;
            Attribute.Value = _currentValue.Value;
        }
    }
    
    protected override void OnInitialized()
    {
        // Set the current value to the value of the attribute.
        // May fail for modded saves.
        foreach (var value in Values)
        {
            if (value.Value != Attribute.Value)
            {
                continue;
            }
            
            _currentValue = value;
            break;
        }
        Leg.OnLegTypeChanged += LegTypeUpdated;
    }

    /// <summary>
    ///    Updates the current value when the leg type changes. If value is null, the current value is not updated.
    /// </summary>
    /// <param name="newLegConfiguration">The new leg configuration</param>
    /// <param name="newFootStructure">The new foot structure</param>
    /// <param name="newGenitalArrangement">The new genital arrangement</param>
    private void LegTypeUpdated(ValueDisplayPair<string>? newLegConfiguration, ValueDisplayPair<string>? newFootStructure, ValueDisplayPair<string>? newGenitalArrangement)
    {
        switch (LegComponentType)
        {
            case LegComponentType.None:
                break;
            case LegComponentType.LegConfiguration:
                if (newLegConfiguration is not null)
                {
                    CurrentValue = newLegConfiguration;
                }
                break;
            case LegComponentType.FootStructure:
                if (newFootStructure is not null)
                {
                    CurrentValue = newFootStructure;
                }
                break;
            case LegComponentType.GenitalArrangement:
                if (newGenitalArrangement is not null)
                {
                    CurrentValue = newGenitalArrangement;
                }
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
}