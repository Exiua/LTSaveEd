@using LTSaveEd.Models
@using LTSaveEd.Models.XmlData

<MudSelect T="ValueDisplayPair<string>" @bind-Value="@CurrentValue" Label="@Label" ReadOnly="@ReadOnly" AnchorOrigin="Origin.BottomCenter">
    @foreach (var value in Values)
    {
        <MudSelectItem Value="@value"/>
    }
</MudSelect>

@code {
    private ValueDisplayPair<string> _currentValue = null!;
    
    /// <summary>
    ///     The values to display in the select.
    /// </summary>
    [Parameter] public required IEnumerable<ValueDisplayPair<string>> Values { get; set; }
    
    /// <summary>
    ///    The label to display above the select.
    /// </summary>
    [Parameter] public required string Label { get; set; }
    
    /// <summary>
    ///    The XmlAttribute to bind to.
    /// </summary>
    [Parameter] public required XmlAttribute<string> Attribute { get; set; }
    
    /// <summary>
    ///   Whether the select is read only.
    /// </summary>
    [Parameter] public bool ReadOnly { get; set; }
    
    [Parameter] public Action<ValueDisplayPair<string>>? CurrentValueChanged { get; set; }

    protected ValueDisplayPair<string> CurrentValue
    {
        get => _currentValue;
        set
        {
            _currentValue = value;
            Attribute.Value = _currentValue.Value;
            CurrentValueChanged?.Invoke(_currentValue);
        }
    }

    protected override void OnInitialized()
    {
        // Set the current value to the value of the attribute.
        foreach (var value in Values)
        {
            if (value.Value != Attribute.Value)
            {
                continue;
            }
            
            _currentValue = value;
            break;
        }
    }
}