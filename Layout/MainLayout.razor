@using LTSaveEd.Models
@using System.Text
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject SaveData SaveData

<MudThemeProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">LTSaveEd</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        <MudTextField @bind-Value="@Filename" ReadOnly="true" Variant="Variant.Outlined"  />
        <MudFileUpload T="IBrowserFile" Accept=".xml" FilesChanged="@LoadSave">
            <ButtonTemplate>
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary" for="@context.Id">
                    LOAD
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        <MudButton Disabled="@_processing" OnClick="@SaveFile" Variant="Variant.Filled" Color="Color.Secondary" Style="margin-top: 5px;">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <div>Save</div>
            }
        </MudButton>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudPaper Width="250px" Elevation="0" Class="py-3">
            <MudNavMenu Bordered="true">
                <MudNavLink Href="/core">Core</MudNavLink>
                <MudNavLink Href="/attributes">Attributes</MudNavLink>
                <MudNavLink Href="/core">Body</MudNavLink>
                <MudNavLink Href="/fetishes">Fetishes</MudNavLink>
                <MudNavLink Href="/core">Perks</MudNavLink>
                <MudNavLink Href="/core">Spells</MudNavLink>
                <MudNavLink Href="/inventory">Inventory</MudNavLink>
                <MudNavLink Href="/core">Relationships</MudNavLink>
                <MudNavLink Href="/core">Family</MudNavLink>
                <MudNavLink Href="/core">Offsprings</MudNavLink>
                <MudNavLink Href="/core">World</MudNavLink>
                <MudNavLink Href="/core">Extra</MudNavLink>
            </MudNavMenu>
        </MudPaper>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Style="margin-left: 10px;">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen;
    private bool _processing;
    private string Filename { get; set; } = "";

    private void DrawerToggle()
    {
        if (!SaveData.Initialized)
        {
            return;
        }
        
        _drawerOpen = !_drawerOpen;
        StateHasChanged();
    }
    
    private async Task LoadSave(IBrowserFile file)
    {
        Filename = file.Name;
        await using var stream = file.OpenReadStream(file.Size + 1);
        await SaveData.Initialize(stream);
        StateHasChanged();
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add("Save Data Loaded!", Severity.Success);
    }
    
    private async Task SaveFile()
    {
        _processing = true;

        try
        {
            var xmlString = SaveData.SaveDataXml.ToString();

            var byteArray = Encoding.UTF8.GetBytes(xmlString);

            await JSRuntime.InvokeVoidAsync("saveAsFile", Filename, byteArray);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving file: {ex.Message}");
        }
        finally
        {
            _processing = false;
        }
    }
}