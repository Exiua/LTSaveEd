@using LTSaveEd.Models

<MudSelect T="ValueDisplayPair" @bind-Value="@CurrentValue" Label="Character" AnchorOrigin="Origin.BottomCenter">
    @foreach (var value in Values)
    {
        <MudSelectItem Value="@value"/>
    }
</MudSelect>

@code {
    // Used as a intermediary to allow proper two-way binding.
    private ValueDisplayPair _currentValue = null!;
    
    /// <summary>
    ///     The list of character Name-Id pairs to display in the select.
    /// </summary>
    [Parameter] public required IEnumerable<ValueDisplayPair> Values { get; set; }
    
    /// <summary>
    ///    The currently selected character Name-Id pair.
    /// </summary>
    [Parameter] public required ValueDisplayPair CharacterId { get; set; }
    
    /// <summary>
    ///     The event that is fired when the selected character Name-Id pair changes.
    /// </summary>
    [Parameter] public EventCallback<ValueDisplayPair> CharacterIdChanged { get; set; }
    
    private ValueDisplayPair CurrentValue
    {
        get => _currentValue;
        set
        {
            // Update the internal value and fire the event to update the bound value.
            _currentValue = value;
            CharacterIdChanged.InvokeAsync(value);
        }
    }

    protected override void OnInitialized()
    {
        // Set the initial value to the parameter value.
        _currentValue = CharacterId;
    }
}